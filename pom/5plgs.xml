<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <relativePath>4res.xml</relativePath>
        <groupId>com.bupt</groupId>
        <artifactId>resources</artifactId>
        <version>1.0.0</version>
    </parent>


    <groupId>com.bupt</groupId>
    <artifactId>plugins</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <!--过滤掉不需要重新进行编码的文件，重新编码会导致认证文件出错-->
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>bsh</nonFilteredFileExtension>
                        <nonFilteredFileExtension>conf</nonFilteredFileExtension>
                        <nonFilteredFileExtension>json</nonFilteredFileExtension>
                        <nonFilteredFileExtension>keytab</nonFilteredFileExtension>
                        <nonFilteredFileExtension>txt</nonFilteredFileExtension>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <id>make-jar</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <!--描述文件的路径-->
                            <descriptor>${project.basedir}/assembly/jar.xml</descriptor>
                            <finalName>${project.artifactId}-${project.version}</finalName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>make-tar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <!--描述文件的路径-->
                            <descriptor>${project.basedir}/assembly/bin.xml</descriptor>
                            <finalName>${project.artifactId}</finalName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--编译scala代码-->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmArgs>
                        <jvmArg>-Xms64m</jvmArg> <!--Xms为初始内存，即最小内存-->
                        <jvmArg>-Xmx2048m</jvmArg><!--Xmx为最大内存-->
                    </jvmArgs>

                    <scalaVersion>${scala.version}</scalaVersion>
                    <args>
                        <arg>-target:jvm-${java.version}</arg>
                    </args>
                </configuration>
            </plugin>

            <plugin>
                <!--编译java代码-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <plugin>
                <!--maven里面执行测试用例的插件-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <configuration>
                    <!--classpath是Java运行时环境搜索类和其他资源文件的路径-->
                    <additionalClasspathElements>
                        <!--<additionalClasspathElement>${project.build.directory}/conf</additionalClasspathElement>-->
                        <!--<additionalClasspathElement>${project.build.directory}/conf-test</additionalClasspathElement>-->
                    </additionalClasspathElements>
                </configuration>
            </plugin>

            <plugin>
                <!--
                1：某个特殊的jar包，但是又不能直接通过maven依赖来获取，或者其他环境的maven仓库不存在
                那么如何将我们所需要的jar包打入到我们的生产jar包中
                2：某个jar包内部的文件是我们所需要的，或者我们希望将它提取出来放入指定位置
                那么除了粘贴复制，通过这个插件进行maven复制
                作用：统一打包到一个目录下面
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <!--自定义项目目录结构，
                解决maven默认的项目结构和自己的项目结构不一致导致无法编译源代码-->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.9.1</version>
                <executions>
                    <!--添加主源码目录-->
                    <execution>
                        <!--自定义名称，不可重复-->
                        <id>add-source</id>
                        <!--指定绑定到生命周期-->
                        <phase>generate-sources</phase>
                        <!--指定指定的目标，可添加多个-->
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.basedir}/src/main/java</source>
                            </sources>
                        </configuration>
                    </execution>

                    <!--添加主资源文件目录-->
                    <execution>
                        <id>add-resource</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <!--资源文件目录可以添加多个-->
                                <resource>
                                    <directory>${project.basedir}/src/main/one</directory>
                                    <!--是否启用变量过滤-->
                                    <filtering>true</filtering>
                                    <!--排除的文件，可添加多个-->
                                    <excludes>
                                        <exclude>**/*.java</exclude>
                                    </excludes>
                                </resource>

                                <resource>
                                    <directory>${project.basedir}/src/main/two</directory>
                                    <filtering>true</filtering>
                                    <excludes>
                                        <exclude>**/*.java</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <!--添加测试源码目录-->
                    <execution>
                        <id>add-test-source</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.basedir}/src/test/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>